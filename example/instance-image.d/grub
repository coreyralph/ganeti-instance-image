#!/bin/bash

# Copyright (C) 2010 Oregon State University
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
# This is an example script that configures, grub after installation. This
# script assumes that grub has been installed onto the image already and a
# working grub.conf exists. This is only enabled if using the tarball image
# type. 

set -e

. common.sh

debug set -x

CLEANUP=( )

trap cleanup EXIT

if [ -z "${TARGET}" -o ! -d "${TARGET}" ] ; then
    log_error "Missing target directory"
    exit 1
fi

# Set disk based on type of hypervisor
disk=""
if [ "${HYPERVISOR}" = "kvm" ] ; then
  disk="vda"
else
  disk="xda"
fi

if [ -n "${INSTANCE_HV_kernel_path}" -o "${IMPORT_SCRIPT}" = "1" ] ; then
    # make /dev/$disk
    mknod ${TARGET}/dev/${disk} b $(stat -L -c "0x%t 0x%T" $BLOCKDEV)
    CLEANUP+=("rm -f ${TARGET}/dev/$disk")

    # make /dev/${disk}1
    mknod ${TARGET}/dev/${disk}1 b $(stat -L -c "0x%t 0x%T" $BOOT_DEV)
    CLEANUP+=("rm -f ${TARGET}/dev/${disk}1")

    # make /dev/${disk}1
    mknod ${TARGET}/dev/${disk}3 b $(stat -L -c "0x%t 0x%T" $ROOT_DEV)
    CLEANUP+=("rm -f ${TARGET}/dev/${disk}3")

    boot_dir="${TARGET}/boot/grub"

    if [ -e "${boot_dir}/menu.lst" ] ; then
        # create device.map
        cat > "${TARGET}/boot/grub/device.map" <<EOF
(hd0) /dev/${disk}
EOF

        # install grub to the block device
        chroot ${TARGET} grub --batch --no-floppy \
            --device-map=/boot/grub/device.map <<EOF
root (hd0,0)
setup (hd0)
quit
EOF

        # check to see if grub is using UUID's and replace if so
        if [ -n "$(grep 'root=UUID' ${boot_dir}/menu.lst)" ] ; then
            root_uuid="$($VOL_ID $ROOT_DEV)"
            sed --follow-symlinks -ie "s/\(root=UUID=\)\([a-z0-9-]*\)/\1${root_uuid}/g" \
                ${boot_dir}/menu.lst
        fi

    elif [ -e "${boot_dir}/grub.cfg" -a -e "${target}/etc/default/grub" ] ; then
        chroot ${TARGET} grub2-install /dev/${disk}
        # check to see if grub is using UUID's and replace if so
        if [ -n "$(grep 'root=UUID' ${boot_dir}/grub.cfg)" ] ; then
            root_uuid="$($VOL_ID $ROOT_DEV)"
            sed --follow-symlinks -ie "s/\(root=UUID=\)\([a-z0-9-]*\)/\1${root_uuid}/g" \
                ${boot_dir}/grub.cfg
        fi
    fi
fi

# setup serial console
if [ "${INSTANCE_HV_serial_console}" = "True" ] ; then
    if [ -e "${boot_dir}/menu.lst" ] ; then
    # Grub 0.x
        sed --follow-symlinks -ie 's/^default.*/default 0\n\nserial --unit=0\nterminal --timeout=3 console serial/' \
            ${boot_dir}/menu.lst
        sed --follow-symlinks -ie 's/\(.*kernel.*\)/\1 console=ttyS0,115200n8/g' \
            ${boot_dir}/menu.lst
    elif [ -e "${boot_dir}/grub.cfg" -a -e "${target}/etc/default/grub" ] ; then
    # Grub 2.x
        sed -ie 's/.*GRUB_TERMINAL.*/GRUB_TERMINAL=serial/' ${target}/etc/default/grub
        sed -ie 's/.*GRUB_CMDLINE_LINUX.*/GRUB_CMDLINE_LINUX=\"console=ttyS0,115200n8\"/' \
            ${target}/etc/default/grub
        echo "GRUB_SERIAL_COMMAND=\"serial --speed=115200 --unit=0 --word=8 --parity=no --stop=1\"" \
            >> ${target}/etc/default/grub
        chroot ${target} /usr/sbin/update-grub
    else
        echo "No grub bootloader found, skipping..."
    fi
fi

# execute cleanups
cleanup
trap - EXIT

exit 0
