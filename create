#!/bin/bash

# Copyright (C) 2007, 2008, 2009 Google Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

set -e

. common.sh

IMAGE_FILE="$IMAGE_DIR/image-$IMAGE_NAME-$ARCH.tar.gz"

if [ "$CDINSTALL" = "no" ] ; then
    # If the target device is not a real block device we'll first losetup it.
    # This is needed for file disks.
    if [ ! -b $blockdev ]; then
      ORIGINAL_BLOCKDEV=$blockdev
      blockdev=$($LOSETUP -sf $blockdev)
      CLEANUP+=("$LOSETUP -d $blockdev")
    fi

    if [ ! -f "$IMAGE_FILE" ] ; then
      log_error "Can't find image file: $IMAGE_FILE"
      exit 1
    fi

    # If the image is tarball based, then we need to manually create the
    # volumes, filesystems, etc
    if [ "${IMAGE_TYPE}" = "tarball" ] ; then
        # Create 3 partitions, /boot, swap, & /
        format_disk0 $blockdev
    elif [ "${IMAGE_TYPE}" = "qemu" ] ; then
        # need a recent version of qemu for this
        qemu-img convert ${IMAGE_FILE} -O host_device ${blockdev}
    fi

    filesystem_base_dev=$(map_disk0 $blockdev)
    if [ "${SWAP}" = "yes" ] ; then
        boot_dev="${filesystem_base_dev}-1"
        swap_dev="${filesystem_base_dev}-2"
        root_dev="${filesystem_base_dev}-3"
    else
        boot_dev="${filesystem_base_dev}-1"
        root_dev="${filesystem_base_dev}-2"
    fi
    CLEANUP+=("unmap_disk0 $blockdev")

    if [ "${IMAGE_TYPE}" = "tarball" ] ; then
        # Format /boot
        mke2fs -Fjq -L /boot $boot_dev
        # Format /
        mke2fs -Fjq -L / $root_dev
        if [ "${SWAP}" = "yes" ] ; then
            # Format swap
            mkswap $swap_dev
        fi
    fi

    TARGET=`mktemp -d` || exit 1
    CLEANUP+=("rmdir $TARGET")

    # mount filesystems
    mount_disk0 $TARGET $root_dev $boot_dev

    if [ "${IMAGE_TYPE}" = "tarball" ] ; then
        # unpack image
        tar pzxf $IMAGE_FILE -C $TARGET
    fi

    RUN_PARTS=`which run-parts`

    if [ -n "$RUN_PARTS" -a -n "$CUSTOMIZE_DIR" -a -d "$CUSTOMIZE_DIR" ]; then
      TARGET=$TARGET
      BLOCKDEV=$blockdev
      ROOT_DEV=$root_dev
      BOOT_DEV=$boot_dev
      export TARGET SUITE ARCH PARTITION_STYLE EXTRA_PKGS BLOCKDEV ROOT_DEV BOOT_DEV
      $RUN_PARTS $CUSTOMIZE_DIR
    fi
fi

# execute cleanups
cleanup
trap - EXIT

exit 0
