#!/bin/bash

# Copyright (C) 2007, 2008, 2009 Google Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

set -e

. common.sh

IMAGE_FILE="$IMAGE_DIR/image-$IMAGE_NAME-$ARCH.tar.gz"

if [ "$CDINSTALL" = "no" ] ; then
    # If the target device is not a real block device we'll first losetup it.
    # This is needed for file disks.
    if [ ! -b $blockdev ]; then
      ORIGINAL_BLOCKDEV=$blockdev
      blockdev=$($LOSETUP -sf $blockdev)
      CLEANUP+=("$LOSETUP -d $blockdev")
    fi

    # Create 3 partitions, /boot, swap, & /
    format_disk0 $blockdev
    filesystem_base_dev=$(map_disk0 $blockdev)
    root_dev="${filesystem_base_dev}-3"
    boot_dev="${filesystem_base_dev}-1"
    swap_dev="${filesystem_base_dev}-2"
    CLEANUP+=("unmap_disk0 $blockdev")

    # Format /boot
    mke2fs -Fjq $boot_dev
    # Format /
    mke2fs -Fjq $root_dev
    # Format swap
    mkswap $swap_dev

    TMPDIR=`mktemp -d` || exit 1
    CLEANUP+=("rmdir $TMPDIR")

    # mount filesystems
    mount $root_dev $TMPDIR
    CLEANUP+=("umount $TMPDIR")
    $MKDIR_P $TMPDIR/boot
    mount $boot_dev $TMPDIR/boot
    CLEANUP+=("umount $TMPDIR/boot")

    if [ ! -f "$IMAGE_FILE" ] ; then
      log_error "Can't find image file: $IMAGE_FILE"
      exit 1
    fi

    # unpack image
    tar pzxf $IMAGE_FILE -C $TMPDIR

    # Set disk based on type of hypervisor
    if [ "$HYPERVISOR" = "kvm" ] ; then
      disk="vda"
    else
      disk="xda"
    fi

    # make /dev/$disk
    mknod $TMPDIR/dev/$disk b $(stat -L -c "0x%t 0x%T" $blockdev)
    CLEANUP+=("rm -f $TMPDIR/dev/$disk")

    # make /dev/${disk}1
    mknod $TMPDIR/dev/${disk}1 b $(stat -L -c "0x%t 0x%T" $boot_dev)
    CLEANUP+=("rm -f $TMPDIR/dev/${disk}1")

    # make /dev/${disk}1
    mknod $TMPDIR/dev/${disk}3 b $(stat -L -c "0x%t 0x%T" $root_dev)
    CLEANUP+=("rm -f $TMPDIR/dev/${disk}3")

    # create device.map
cat > "$TMPDIR/boot/grub/device.map" <<EOF
(hd0) /dev/$disk
EOF

    # install grub to the block device
    chroot $TMPDIR grub --batch --no-floppy --device-map=/boot/grub/device.map <<EOF
root (hd0,0)
setup (hd0)
quit
EOF 

    RUN_PARTS=`which run-parts`

    if [ -n "$RUN_PARTS" -a -n "$CUSTOMIZE_DIR" -a -d "$CUSTOMIZE_DIR" ]; then
      TARGET=$TMPDIR
      BLOCKDEV=$blockdev
      FSYSDEV=$filesystem_dev
      export TARGET SUITE ARCH PARTITION_STYLE EXTRA_PKGS BLOCKDEV FSYSDEV
      $RUN_PARTS $CUSTOMIZE_DIR
    fi
fi

# execute cleanups
cleanup
trap - EXIT

exit 0
